###### STEP 1 ######
vim lab-user.yaml
kubectl apply -f lab-user.yaml
kubectl get serviceaccount lab-user

apiVersion: v1
kind: ServiceAccount
metadata:
  name: lab-user			


######### STEP 2 ########
vim lab-cluster-role.yaml
kubectl apply -f lab-cluster-role.yaml


apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: lab-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "deployments"]
  verbs: ["get", "list"]

##### STEP 3 #####
vim lab-role-binding.yaml
kubectl apply -f lab-role-binding.yaml
kubectl -n kube-system rollout restart deployment coredns
kubectl run defaultsa-pod --image=quay.io/gauravkumar9130/nginx
kubectl exec -it defaultsa-pod -- bash
TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
curl -H "Authorization: Bearer $TOKEN" https://kubernetes/api/v1/namespaces/default/pods/ --insecure
exit


apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: lab-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: lab-user
  namespace: default
roleRef:
  kind: ClusterRole
  name: lab-cluster-role
  apiGroup: rbac.authorization.k8s.io


###### STEP 4 #####
vim pod.yaml
kubectl create -f pod.yaml
kubectl exec -it lab-sa-pod -- bash
TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
curl -H "Authorization: Bearer $TOKEN" https://kubernetes/api/v1/namespaces/default/pods/ --insecure
curl -H "Authorization: Bearer $TOKEN" https://kubernetes/api/v1/namespaces/kube-system/pods/ --insecure
exit
kubectl delete serviceaccount lab-user
kubectl get serviceaccount lab-user



apiVersion: v1
kind: Pod
metadata:
  name: lab-sa-pod
spec:
  containers:
  - name: abc
    image: nginx
  serviceAccountName: lab-user
